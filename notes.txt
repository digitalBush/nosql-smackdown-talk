NoSQL Smackdown notes:

The goal is to try to help you wade through the myriad number of options. The number one thing I overhear people say is "I need to learn me some NoSQL" :(

NoSQL isn't a thing. It's just a category of things which it is not. 

Is NoSQL a fad?
How does it change programming style?
What is the most painful part?

"My screwdriver is x times faster than your hammer at putting screws into things"  What about nails? - Eric Redmond

ACID? Bank example, except banks don't work in ACID.

Need examples of harware costs for scaling up vs scaling out.

CAP Theorem

Eventually consistent

How does the distributed system respond to node failures.

Failure Types:
 * Node dies.
   * Gone forver. Dead drive for instance.
   * Temporary. Reboot for instance.
 * Network Partition.
   * When that node is unreachable, then it's just as if the node went away temporarily.
   * What happens if the node is reachable from the outside, but can't talk to its peers?

Scenario:
 7 databases standed island with news. Maybe something like who is the latest president?

We need to talk about latency.

How can we distribute our data:
 * Replication
 * Sharding
 * Quorum

Scaling might be important, but modeling is important too. Talk about examples of the following:
Riak and file storage
Neo4j vs inner joined query
Document DB with custom attributes vs sql schema
Columnar for versioning vs sql schema

Talk about the primary differences here
Categories:
 * Key/Value
 * Document
 * Column Family
 * Graph

Specifics:
 * Dynamo(Riak)
 * CouchDB
 * MongoDB
 * RavenDB
 * Neo4j
 * Cassandra


